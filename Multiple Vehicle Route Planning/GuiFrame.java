
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import static org.apache.poi.hssf.usermodel.HeaderFooter.file;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public class GuiFrame extends javax.swing.JFrame {

    
    ArrayList<Rota> rotalar = new ArrayList<Rota>();
    ArrayList<Tir> tirlar = new ArrayList<Tir>();
    ArrayList<Sehir> butunSehirler = new ArrayList<Sehir>();
    HashMap<Integer, String> iller = new HashMap<Integer, String>();
    
    int[][] illerArasiUzakliklar = new int[][]{
        { 0, 335, 572, 966, 604, 489, 540, 1036, 879, 900, 770, 634, 732, 687, 662, 839, 1098, 575, 578, 758, 525, 1174, 494, 671, 810, 687, 212, 212, 719, 777, 909, 191, 614, 69, 944, 898, 1014, 681, 332, 1155, 374, 834, 355, 672, 396, 882, 192, 537, 851, 743, 286,204,709,918, 797, 721, 708, 844, 423, 1075, 492, 843, 628, 349, 687, 895, 486, 764, 264, 799, 289, 474, 621, 720, 779, 1043, 1069,899,711,246,87,732 },
        { 335, 0, 907, 648, 635, 746, 875, 757, 1214, 1235, 1048, 351, 414, 940, 997, 1117, 1388, 776, 699, 1093, 207, 1431, 285, 550, 531, 965, 150, 150, 711, 683, 665, 316, 949, 404, 1201, 1233, 735, 882, 427, 1412, 562, 1091, 690, 1007, 187, 1217, 163, 298, 1186, 464, 508,539,727,859, 1054, 752, 390, 893, 415, 1332, 523, 784, 419, 112, 1022, 577, 624, 1017, 583, 656, 624, 675, 303, 476, 1032, 764, 751,1156,964,210,248,985 },
        { 572, 907, 0, 1318, 597, 256, 291, 1244, 345, 328, 212, 1095, 1287, 420, 169, 277, 526, 398, 505, 222, 1097, 683, 955, 948, 1138, 144, 784, 784, 872, 1015, 1481, 763, 168, 565, 453, 326, 1339, 504, 521, 664, 426, 343, 223, 100, 857, 310, 764, 1109, 367, 1204, 440,459,828,1083, 306, 677, 1280, 676, 703, 584, 643, 1008, 1079, 921, 115, 1422, 479, 488, 365, 1037, 336, 339, 1193, 1292, 515, 1353, 1430,341,447,818,659,375 },
        { 966, 648, 1318, 0, 736, 1054, 1428, 396, 1640, 1570, 1358, 358, 234, 1145, 1423, 1419, 1690, 984, 828, 1517, 441, 1636, 496, 370, 183, 1295, 754, 754, 546, 383, 432, 947, 1373, 1035, 1406, 1640, 215, 990, 812, 1617, 943, 1296, 1114, 1373, 592, 1624, 811, 518, 1662, 245, 891,938,590,549, 1259, 741, 331, 896, 618, 1537, 675, 484, 423, 617, 1429, 230, 842, 1206, 966, 305, 1114, 979, 369, 417, 1173, 309, 143,1361,1104,814,879,1190 },
        { 604, 635, 597, 736, 0, 333, 825, 694, 938, 834, 622, 639, 831, 409, 762, 683, 954, 248, 92, 815, 659, 900, 506, 366, 556, 574, 587, 587, 322, 433, 1121, 684, 719, 636, 670, 919, 757, 254, 346, 881, 312, 560, 511, 652, 466, 903, 511, 754, 960, 748, 361,439,278,533, 523, 131, 846, 258, 220, 801, 114, 458, 497, 719, 708, 966, 200, 470, 422, 455, 615, 258, 759, 932, 437, 781, 848,625,368,647,616,454 },
        { 489, 746, 256, 1054, 333, 0, 543, 980, 597, 536, 316, 867, 1059, 191, 421, 385, 656, 131, 241, 474, 878, 682, 725, 684, 874, 233, 659, 659, 608, 751, 1340, 680, 420, 482, 452, 578, 1075, 237, 319, 663, 184, 342, 258, 311, 655, 562, 583, 973, 619, 976, 276,347,564,819, 305, 413, 1065, 409, 439, 583, 379, 744, 815, 796, 367, 1194, 215, 268, 225, 773, 369, 75, 978, 1151, 283, 1089, 1166,407,215,719,576,236 },
        { 540, 875, 291, 1428, 825, 543, 0, 1466, 339, 507, 475, 1174, 1272, 683, 122, 540, 702, 668, 733, 220, 1065, 910, 1034, 1058, 1248, 423, 752, 752, 1100, 1164, 1449, 731, 130, 471, 716, 444, 1449, 774, 618, 927, 572, 606, 322, 363, 936, 428, 732, 1077, 311, 1283, 537,544,1056,1305, 569, 905, 1248, 946, 810, 847, 871, 1230, 1168, 889, 294, 1435, 684, 751, 462, 1186, 374, 567, 1161, 1260, 802, 1473, 1540,604,734,786,627,638 },
        { 1036, 757, 1244, 396, 694, 980, 1466, 0, 1585, 1464, 1252, 406, 562, 1039, 1409, 1313, 1584, 895, 739, 1462, 550, 1530, 544, 408, 226, 1221, 863, 863, 372, 337, 769, 1017, 1366, 1105, 1300, 1566, 208, 857, 850, 1511, 950, 1190, 1152, 1299, 640, 1550, 864, 645, 1607, 479, 929,976,416,161, 1153, 567, 659, 722, 656, 1431, 633, 236, 461, 726, 1355, 567, 838, 1073, 1004, 343, 1152, 905, 603, 745, 1040, 117, 342,1255,971,923,949,1084 },
        { 879, 1214, 345, 1640, 938, 597, 339, 1585, 0, 296, 520, 1404, 1596, 719, 269, 445, 452, 739, 846, 126, 1404, 660, 1264, 1270, 1460, 477, 1091, 1091, 1213, 1356, 1788, 1070, 288, 810, 683, 126, 1661, 845, 830, 677, 767, 573, 532, 408, 1166, 155, 1071, 1416, 99, 1513, 749,768,1169,1424, 605, 1018, 1587, 1017, 1022, 631, 984, 1349, 1398, 1228, 273, 1731, 820, 787, 674, 1378, 641, 680, 1500, 1599, 856, 1685, 1752,510,788,1125,966,674 },
        { 900, 1235, 328, 1570, 834, 536, 507, 1464, 296, 0, 246, 1411, 1603, 425, 395, 151, 198, 658, 777, 287, 1422, 406, 1269, 1200, 1390, 303, 1112, 1112, 1092, 1255, 1809, 1091, 394, 893, 389, 176, 1591, 670, 841, 423, 706, 279, 551, 228, 1177, 141, 1092, 1437, 395, 1520, 768,787,1048,1303, 311, 897, 1608, 842, 983, 377, 923, 1228, 1331, 1249, 223, 1738, 759, 493, 693, 1289, 664, 619, 1521, 1620, 582, 1573, 1682,216,559,1146,987,380 },
        { 770, 1048, 212, 1358, 622, 316, 475, 1252, 520, 246, 0, 1191, 1383, 213, 353, 95, 366, 446, 565, 397, 1202, 476, 1049, 988, 1178, 83, 961, 961, 880, 1043, 1658, 961, 352, 763, 246, 420, 1379, 458, 621, 457, 486, 136, 421, 112, 957, 385, 885, 1286, 542, 1300, 578,648,836,1091, 99, 685, 1389, 630, 763, 377, 703, 1016, 1119, 1098, 251, 1518, 539, 281, 526, 1077, 534, 399, 1302, 1469, 370, 1361, 1470,129,347,1016,857,168 },
        { 634, 351, 1095, 358, 639, 867, 1174, 406, 1404, 1411, 1191, 0, 196, 1048, 1187, 1260, 1531, 868, 712, 1281, 144, 1539, 142, 273, 180, 1108, 457, 457, 546, 383, 503, 615, 1137, 703, 1309, 1421, 384, 893, 574, 1520, 709, 1199, 878, 1186, 238, 1405, 462, 239, 1426, 113, 655,702,590,559, 1162, 719, 284, 864, 428, 1440, 536, 484, 142, 320, 1210, 331, 652, 1109, 730, 305, 878, 792, 197, 370, 1076, 413, 475,1264,1007,517,547,1093 },
        { 732, 414, 1287, 234, 831, 1059, 1272, 562, 1596, 1603, 1383, 196, 0, 1240, 1379, 1452, 1723, 1060, 904, 1473, 207, 1731, 334, 465, 349, 1300, 520, 520, 712, 549, 335, 713, 1329, 801, 1501, 1613, 433, 1085, 766, 1712, 901, 1391, 1070, 1378, 430, 1597, 577, 284, 1583, 83, 847,894,756,715, 1354, 907, 97, 1056, 620, 1632, 728, 650, 334, 383, 1402, 163, 844, 1301, 922, 471, 1021, 984, 135, 183, 1268, 494, 337,1456,1199,580,645,1285 },
        { 687, 940, 420, 1145, 409, 191, 683, 1039, 719, 425, 213, 1048, 1240, 0, 561, 274, 545, 233, 352, 605, 1068, 491, 915, 775, 965, 291, 853, 853, 667, 830, 1530, 878, 560, 680, 261, 599, 1166, 245, 513, 472, 378, 151, 456, 320, 849, 564, 777, 1163, 750, 1157, 470,545,623,878, 114, 472, 1255, 417, 629, 392, 523, 803, 906, 990, 459, 1375, 409, 158, 423, 864, 567, 269, 1168, 1341, 174, 1148, 1257,216,134,913,774,45 },
        { 662, 997, 169, 1423, 762, 421, 122, 1409, 269, 395, 353, 1187, 1379, 561, 0, 418, 593, 563, 670, 150, 1187, 801, 1047, 1053, 1243, 301, 874, 874, 1037, 1159, 1571, 853, 51, 593, 594, 374, 1444, 669, 613, 805, 566, 484, 314, 241, 949, 358, 854, 1199, 241, 1296, 532,551,993,1248, 447, 842, 1370, 841, 805, 725, 808, 1173, 1181, 1011, 172, 1514, 644, 629, 457, 1181, 419, 504, 1283, 1382, 680, 1468, 1535,482,612,908,749,516 },
        { 839, 1117, 277, 1419, 683, 385, 540, 1313, 445, 151, 95, 1260, 1452, 274, 418, 0, 271, 507, 626, 436, 1271, 419, 1118, 1049, 1239, 152, 1030, 1030, 941, 1104, 1727, 1030, 417, 832, 242, 325, 1440, 519, 690, 436, 555, 132, 490, 177, 1026, 290, 954, 1355, 544, 1369, 647,717,897,1152, 160, 746, 1458, 691, 832, 373, 772, 1077, 1180, 1167, 308, 1587, 608, 342, 595, 1138, 603, 468, 1371, 1538, 431, 1422, 1531,69,408,1085,926,229 },
        { 1098, 1388, 526, 1690, 954, 656, 702, 1584, 452, 198, 366, 1531, 1723, 545, 593, 271, 0, 778, 897, 482, 1542, 216, 1389, 1320, 1510, 423, 1301, 1301, 1212, 1375, 1998, 1289, 592, 1091, 318, 328, 1711, 790, 961, 233, 826, 399, 749, 426, 1297, 331, 1225, 1626, 551, 1640, 918,985,1168,1423, 431, 1017, 1729, 962, 1103, 187, 1043, 1348, 1451, 1438, 421, 1858, 879, 613, 866, 1409, 862, 739, 1642, 1809, 702, 1693, 1802,336,679,1344,1185,500 },
        { 575, 776, 398, 984, 248, 131, 668, 895, 739, 658, 446, 868, 1060, 233, 563, 507, 778, 0, 156, 616, 879, 724, 726, 614, 804, 375, 689, 689, 523, 681, 1341, 766, 562, 568, 494, 720, 1005, 106, 349, 705, 214, 384, 354, 453, 685, 704, 613, 974, 761, 977, 306,388,479,734, 347, 328, 1066, 278, 440, 625, 334, 659, 745, 826, 509, 1195, 245, 295, 311, 703, 465, 105, 979, 1152, 282, 1004, 1096,449,193,749,662,278 },
        { 578, 699, 505, 828, 92, 241, 733, 739, 846, 777, 565, 712, 904, 352, 670, 626, 897, 156, 0, 723, 723, 843, 570, 458, 648, 482, 621, 621, 367, 525, 1185, 718, 627, 571, 613, 827, 849, 197, 281, 824, 220, 503, 419, 560, 530, 811, 545, 818, 868, 821, 296,374,323,578, 466, 172, 910, 266, 284, 744, 178, 503, 589, 758, 616, 1039, 108, 413, 330, 547, 530, 166, 823, 996, 380, 848, 940,568,311,681,650,397 },
        { 758, 1093, 222, 1517, 815, 474, 220, 1462, 126, 287, 397, 1281, 1473, 605, 150, 436, 482, 616, 723, 0, 1283, 690, 1141, 1147, 1337, 354, 970, 970, 1090, 1233, 1667, 949, 165, 691, 638, 224, 1538, 722, 707, 707, 644, 528, 409, 285, 1043, 208, 950, 1295, 145, 1390, 626,645,1046,1301, 491, 895, 1466, 894, 899, 661, 861, 1226, 1275, 1107, 150, 1608, 697, 673, 551, 1255, 518, 557, 1379, 1478, 733, 1562, 1629,501,665,1004,845,560 },
        { 525, 207, 1097, 441, 659, 878, 1065, 550, 1404, 1422, 1202, 144, 207, 1068, 1187, 1271, 1542, 879, 723, 1283, 0, 1559, 153, 408, 324, 1119, 313, 313, 690, 527, 462, 506, 1139, 594, 1329, 1423, 528, 913, 585, 1540, 720, 1219, 880, 1197, 249, 1407, 370, 95, 1376, 257, 666,713,733,703, 1182, 776, 187, 917, 439, 1460, 547, 628, 277, 176, 1212, 370, 663, 1129, 741, 449, 814, 803, 100, 273, 1096, 557, 544,1284,1027,373,438,1113 },
        { 1174, 1431, 683, 1636, 900, 682, 910, 1530, 660, 406, 476, 1539, 1731, 491, 801, 419, 216, 724, 843, 690, 1559, 0, 1406, 1266, 1456, 554, 1344, 1344, 1158, 1321, 2021, 1365, 800, 1167, 230, 536, 1657, 736, 1004, 62, 869, 340, 892, 583, 1340, 539, 1268, 1654, 759, 1648, 961,1032,1114,1369, 377, 963, 1746, 908, 1120, 140, 1014, 1294, 1397, 1481, 629, 1866, 900, 559, 910, 1355, 1005, 760, 1659, 1832, 648, 1639, 1748,405,625,1404,1261,446 },
        { 494, 285, 955, 496, 506, 725, 1034, 544, 1264, 1269, 1049, 142, 334, 915, 1047, 1118, 1389, 726, 570, 1141, 153, 1406, 0, 267, 318, 966, 342, 342, 563, 400, 615, 475, 997, 563, 1176, 1281, 522, 760, 434, 1387, 569, 1066, 738, 1044, 98, 1265, 322, 248, 1286, 251, 515,562,592,576, 1029, 623, 340, 764, 286, 1307, 394, 501, 136, 319, 1070, 469, 510, 976, 590, 396, 738, 650, 253, 426, 943, 551, 613,1131,874,402,407,960 },
        { 671, 550, 948, 370, 366, 684, 1058, 408, 1270, 1200, 988, 273, 465, 775, 1053, 1049, 1320, 614, 458, 1147, 408, 1266, 267, 0, 190, 925, 607, 607, 296, 133, 772, 740, 1003, 740, 1036, 1270, 391, 620, 442, 1247, 573, 926, 744, 1003, 363, 1254, 578, 503, 1292, 382, 521,568,325,309, 889, 446, 557, 591, 248, 1167, 305, 234, 131, 574, 1059, 600, 472, 836, 596, 155, 744, 609, 470, 643, 803, 415, 482,991,734,667,672,820 },
        { 810, 531, 1138, 183, 556, 874, 1248, 226, 1460, 1390, 1178, 180, 349, 965, 1243, 1239, 1510, 804, 648, 1337, 324, 1456, 318, 190, 0, 1115, 637, 637, 366, 203, 615, 791, 1193, 879, 1226, 1460, 204, 810, 632, 1437, 763, 1116, 934, 1193, 414, 1444, 638, 419, 1482, 266, 711,758,410,379, 1079, 561, 446, 716, 438, 1357, 495, 304, 243, 500, 1249, 413, 662, 1026, 786, 125, 934, 799, 377, 532, 993, 233, 295,1181,924,697,723,1010 },
        { 687, 965, 144, 1295, 574, 233, 423, 1221, 477, 303, 83, 1108, 1300, 291, 301, 152, 423, 375, 482, 354, 1119, 554, 966, 925, 1115, 0, 878, 878, 849, 992, 1575, 878, 300, 680, 324, 410, 1316, 481, 538, 535, 403, 214, 338, 78, 874, 394, 802, 1203, 499, 1217, 495,565,805,1060, 177, 654, 1306, 653, 680, 455, 620, 985, 1056, 1015, 217, 1435, 456, 359, 443, 1014, 451, 316, 1219, 1386, 448, 1330, 1407,212,424,933,774,246 },
        { 212, 150, 784, 754, 587, 659, 752, 863, 1091, 1112, 961, 457, 520, 853, 874, 1030, 1301, 689, 621, 970, 313, 1344, 342, 607, 637, 878, 0, 0, 702, 740, 697, 193, 826, 281, 1114, 1110, 841, 795, 340, 1325, 475, 1004, 567, 884, 244, 1094, 76, 325, 1063, 570, 421,416,692,901, 967, 704, 496, 845, 406, 1245, 475, 826, 476, 137, 899, 683, 537, 930, 476, 736, 501, 588, 409, 508, 945, 870, 857,1069,877,64,125,898 },
        { 719, 711, 872, 546, 322, 608, 1100, 372, 1213, 1092, 880, 546, 712, 667, 1037, 941, 1212, 523, 367, 1090, 690, 1158, 563, 296, 366, 849, 702, 702, 0, 163, 978, 799, 994, 788, 928, 1194, 567, 485, 490, 1139, 578, 818, 786, 927, 542, 1178, 626, 785, 1235, 629, 569,616,44,211, 781, 195, 809, 350, 296, 1059, 261, 136, 427, 795, 983, 776, 466, 701, 644, 241, 792, 533, 743, 895, 668, 481, 658,883,599,762,731,712 },
        { 777, 683, 1015, 383, 433, 751, 1164, 337, 1356, 1255, 1043, 383, 549, 830, 1159, 1104, 1375, 681, 525, 1233, 527, 1321, 400, 133, 203, 992, 740, 740, 163, 0, 815, 857, 1109, 846, 1091, 1337, 404, 648, 548, 1302, 679, 981, 850, 1070, 496, 1321, 684, 622, 1378, 466, 627,674,207,176, 944, 358, 646, 513, 354, 1222, 372, 101, 264, 703, 1126, 613, 577, 864, 702, 78, 850, 676, 580, 732, 831, 428, 495,1046,762,800,789,875 },
        { 909, 665, 1481, 432, 1121, 1340, 1449, 769, 1788, 1809, 1658, 503, 335, 1530, 1571, 1727, 1998, 1341, 1185, 1667, 462, 2021, 615, 772, 615, 1575, 697, 697, 978, 815, 0, 890, 1523, 978, 1791, 1807, 567, 1375, 1037, 2002, 1172, 1681, 1264, 1581, 711, 1791, 773, 398, 1760, 390, 1118,1113,1022,922, 1644, 1173, 275, 1328, 901, 1922, 1009, 916, 641, 560, 1596, 202, 1125, 1591, 1173, 737, 1198, 1265, 362, 189, 1558, 655, 427,1746,1489,757,822,1575 },
        { 191, 316, 763, 947, 684, 680, 731, 1017, 1070, 1091, 961, 615, 713, 878, 853, 1030, 1289, 766, 718, 949, 506, 1365, 475, 740, 791, 878, 193, 193, 799, 857, 890, 0, 805, 260, 1135, 1089, 995, 872, 437, 1346, 565, 1025, 546, 863, 377, 1073, 173, 518, 1042, 724, 477,395,789,998, 988, 801, 689, 942, 503, 1266, 572, 923, 609, 330, 878, 876, 634, 955, 455, 869, 480, 665, 602, 701, 970, 1024, 1050,1090,902,145,129,923 },
        { 614, 949, 168, 1373, 719, 420, 130, 1366, 288, 394, 352, 1137, 1329, 560, 51, 417, 592, 562, 627, 165, 1139, 800, 997, 1003, 1193, 300, 826, 826, 994, 1109, 1523, 805, 0, 569, 593, 382, 1394, 668, 563, 804, 516, 483, 263, 240, 899, 366, 806, 1151, 292, 1246, 482,501,950,1205, 446, 799, 1322, 840, 755, 724, 765, 1130, 1131, 963, 171, 1464, 600, 628, 407, 1131, 368, 461, 1235, 1334, 679, 1418, 1485,481,611,860,701,515 },
        { 69, 404, 565, 1035, 636, 482, 471, 1105, 810, 893, 763, 703, 801, 680, 593, 832, 1091, 568, 571, 691, 594, 1167, 563, 740, 879, 680, 281, 281, 788, 846, 978, 260, 569, 0, 937, 891, 1083, 674, 325, 1148, 367, 827, 348, 665, 465, 875, 261, 606, 782, 812, 279,197,778,987, 790, 743, 777, 837, 492, 1068, 561, 912, 697, 418, 680, 964, 479, 757, 257, 868, 235, 467, 690, 789, 772, 1112, 1138,892,704,315,156,725 },
        { 944, 1201, 453, 1406, 670, 452, 716, 1300, 683, 389, 246, 1309, 1501, 261, 594, 242, 318, 494, 613, 638, 1329, 230, 1176, 1036, 1226, 324, 1114, 1114, 928, 1091, 1791, 1135, 593, 937, 0, 563, 1427, 506, 774, 211, 639, 110, 662, 353, 1110, 528, 1038, 1424, 782, 1418, 731,802,884,1139, 147, 733, 1516, 678, 890, 131, 784, 1064, 1167, 1251, 492, 1636, 670, 329, 680, 1125, 775, 530, 1429, 1602, 418, 1409, 1518,175,395,1174,1031,216 },
        { 898, 1233, 326, 1640, 919, 578, 444, 1566, 126, 176, 420, 1421, 1613, 599, 374, 325, 328, 720, 827, 224, 1423, 536, 1281, 1270, 1460, 410, 1110, 1110, 1194, 1337, 1807, 1089, 382, 891, 563, 0, 1661, 826, 847, 553, 748, 453, 549, 332, 1183, 35, 1090, 1435, 225, 1530, 766,785,1150,1405, 485, 999, 1606, 998, 1025, 507, 965, 1330, 1401, 1247, 211, 1748, 801, 667, 691, 1359, 662, 661, 1519, 1618, 756, 1675, 1752,390,733,1144,985,554 },
        { 1014, 735, 1339, 215, 757, 1075, 1449, 208, 1661, 1591, 1379, 384, 433, 1166, 1444, 1440, 1711, 1005, 849, 1538, 528, 1657, 522, 391, 204, 1316, 841, 841, 567, 404, 567, 995, 1394, 1083, 1427, 1661, 0, 1011, 833, 1638, 964, 1317, 1135, 1394, 618, 1645, 842, 623, 1683, 350, 912,959,611,361, 1280, 762, 530, 917, 639, 1558, 696, 436, 444, 704, 1450, 365, 863, 1227, 987, 326, 1135, 1000, 568, 616, 1194, 94, 140,1382,1125,901,927,1211 },
        { 681, 882, 504, 990, 254, 237, 774, 857, 845, 670, 458, 893, 1085, 245, 669, 519, 790, 106, 197, 722, 913, 736, 760, 620, 810, 481, 795, 795, 485, 648, 1375, 872, 668, 674, 506, 826, 1011, 0, 455, 717, 320, 396, 460, 559, 720, 809, 719, 1008, 867, 1002, 412,494,441,696, 359, 290, 1100, 183, 474, 637, 368, 621, 751, 932, 615, 1220, 301, 216, 417, 709, 571, 211, 1013, 1186, 183, 966, 1102,461,114,855,768,290 },
        { 332, 427, 521, 812, 346, 319, 618, 850, 830, 841, 621, 574, 766, 513, 613, 690, 961, 349, 281, 707, 585, 1004, 434, 442, 632, 538, 340, 340, 490, 548, 1037, 437, 563, 325, 774, 847, 833, 455, 0, 985, 135, 664, 304, 616, 336, 831, 264, 665, 852, 683, 81,128,480,689, 627, 453, 772, 547, 194, 905, 263, 614, 568, 477, 636, 901, 197, 590, 156, 570, 304, 248, 685, 848, 605, 857, 924,729,537,400,369,558 },
        { 1155, 1412, 664, 1617, 881, 663, 927, 1511, 677, 423, 457, 1520, 1712, 472, 805, 436, 233, 705, 824, 707, 1540, 62, 1387, 1247, 1437, 535, 1325, 1325, 1139, 1302, 2002, 1346, 804, 1148, 211, 553, 1638, 717, 985, 0, 850, 321, 873, 564, 1321, 556, 1249, 1635, 776, 1629, 942,1013,1095,1350, 358, 944, 1727, 889, 1101, 121, 995, 1275, 1378, 1462, 646, 1847, 881, 540, 891, 1336, 986, 741, 1640, 1813, 629, 1620, 1729,386,606,1385,1242,427 },
        { 374, 562, 426, 943, 312, 184, 572, 950, 767, 706, 486, 709, 901, 378, 566, 555, 826, 214, 220, 644, 720, 869, 569, 573, 763, 403, 475, 475, 578, 679, 1172, 565, 516, 367, 639, 748, 964, 320, 135, 850, 0, 529, 258, 481, 471, 732, 399, 800, 789, 818, 92,174,534,789, 492, 392, 907, 486, 325, 770, 317, 714, 703, 612, 537, 1036, 112, 455, 110, 701, 321, 113, 820, 983, 470, 988, 1055,594,402,535,461,423 },
        { 834, 1091, 343, 1296, 560, 342, 606, 1190, 573, 279, 136, 1199, 1391, 151, 484, 132, 399, 384, 503, 528, 1219, 340, 1066, 926, 1116, 214, 1004, 1004, 818, 981, 1681, 1025, 483, 827, 110, 453, 1317, 396, 664, 321, 529, 0, 552, 243, 1000, 418, 928, 1314, 672, 1308, 621,692,774,1029, 37, 623, 1406, 568, 780, 241, 674, 954, 1057, 1141, 382, 1526, 560, 219, 570, 1015, 665, 420, 1319, 1492, 308, 1299, 1408,65,285,1064,921,106 },
        { 355, 690, 223, 1114, 511, 258, 322, 1152, 532, 551, 421, 878, 1070, 456, 314, 490, 749, 354, 419, 409, 880, 892, 738, 744, 934, 338, 567, 567, 786, 850, 1264, 546, 263, 348, 662, 549, 1135, 460, 304, 873, 258, 552, 0, 323, 640, 533, 547, 892, 554, 987, 223,242,742,991, 515, 591, 1063, 632, 496, 793, 557, 916, 872, 704, 338, 1205, 370, 533, 148, 872, 119, 253, 976, 1075, 548, 1159, 1226,550,480,601,442,501 },
        { 672, 1007, 100, 1373, 652, 311, 363, 1299, 408, 228, 112, 1186, 1378, 320, 241, 177, 426, 453, 560, 285, 1197, 583, 1044, 1003, 1193, 78, 884, 884, 927, 1070, 1581, 863, 240, 665, 353, 332, 1394, 559, 616, 564, 481, 243, 323, 0, 952, 316, 864, 1209, 430, 1295, 540,559,883,1138, 206, 732, 1380, 731, 758, 484, 698, 1063, 1134, 1021, 139, 1513, 534, 388, 465, 1092, 436, 394, 1293, 1392, 477, 1408, 1485,241,454,918,759,275 },
        { 396, 187, 857, 592, 466, 655, 936, 640, 1166, 1177, 957, 238, 430, 849, 949, 1026, 1297, 685, 530, 1043, 249, 1340, 98, 363, 414, 874, 244, 244, 542, 496, 711, 377, 899, 465, 1110, 1183, 618, 720, 336, 1321, 471, 1000, 640, 952, 0, 1167, 224, 344, 1188, 347, 417,464,558,672, 963, 583, 436, 724, 246, 1241, 354, 597, 232, 271, 972, 565, 470, 926, 492, 492, 640, 584, 349, 522, 903, 647, 709,1065,834,304,309,894 },
        { 882, 1217, 310, 1624, 903, 562, 428, 1550, 155, 141, 385, 1405, 1597, 564, 358, 290, 331, 704, 811, 208, 1407, 539, 1265, 1254, 1444, 394, 1094, 1094, 1178, 1321, 1791, 1073, 366, 875, 528, 35, 1645, 809, 831, 556, 732, 418, 533, 316, 1167, 0, 1074, 1419, 254, 1514, 750,769,1134,1389, 450, 983, 1590, 981, 1009, 510, 949, 1314, 1385, 1231, 195, 1732, 785, 632, 675, 1343, 646, 645, 1503, 1602, 721, 1659, 1736,355,698,1128,969,519 },
        { 192, 163, 764, 811, 511, 583, 732, 864, 1071, 1092, 885, 462, 577, 777, 854, 954, 1225, 613, 545, 950, 370, 1268, 322, 578, 638, 802, 76, 76, 626, 684, 773, 173, 806, 261, 1038, 1090, 842, 719, 264, 1249, 399, 928, 547, 864, 224, 1074, 0, 401, 1043, 571, 345,392,616,825, 891, 628, 553, 769, 330, 1169, 399, 750, 456, 213, 879, 740, 461, 854, 420, 706, 481, 512, 466, 584, 869, 871, 914,993,801,136,105,822 },
        { 537, 298, 1109, 518, 754, 973, 1077, 645, 1416, 1437, 1286, 239, 284, 1163, 1199, 1355, 1626, 974, 818, 1295, 95, 1654, 248, 503, 419, 1203, 325, 325, 785, 622, 398, 518, 1151, 606, 1424, 1435, 623, 1008, 665, 1635, 800, 1314, 892, 1209, 344, 1419, 401, 0, 1388, 352, 746,741,828,798, 1277, 871, 231, 1012, 534, 1555, 642, 723, 372, 188, 1224, 447, 758, 1224, 801, 544, 826, 898, 149, 209, 1191, 652, 621,1379,1122,385,450,1208 },
        { 851, 1186, 367, 1662, 960, 619, 311, 1607, 99, 395, 542, 1426, 1583, 750, 241, 544, 551, 761, 868, 145, 1376, 759, 1286, 1292, 1482, 499, 1063, 1063, 1235, 1378, 1760, 1042, 292, 782, 782, 225, 1683, 867, 852, 776, 789, 672, 554, 430, 1188, 254, 1043, 1388, 0, 1535, 771,790,1191,1446, 636, 1040, 1559, 1039, 1044, 730, 1006, 1371, 1420, 1200, 295, 1746, 842, 818, 696, 1400, 660, 702, 1472, 1571, 878, 1707, 1774,609,810,1097,938,705 },
        { 743, 464, 1204, 245, 748, 976, 1283, 479, 1513, 1520, 1300, 113, 83, 1157, 1296, 1369, 1640, 977, 821, 1390, 257, 1648, 251, 382, 266, 1217, 570, 570, 629, 466, 390, 724, 1246, 812, 1418, 1530, 350, 1002, 683, 1629, 818, 1308, 987, 1295, 347, 1514, 571, 352, 1535, 0, 764,811,673,632, 1271, 824, 180, 973, 537, 1549, 645, 567, 251, 433, 1319, 218, 761, 1218, 839, 388, 987, 901, 218, 266, 1185, 411, 388,1373,1116,630,656,1202 },
        { 286, 508, 440, 891, 361, 276, 537, 929, 749, 768, 578, 655, 847, 470, 532, 647, 918, 306, 296, 626, 666, 961, 515, 521, 711, 495, 421, 421, 569, 627, 1118, 477, 482, 279, 731, 766, 912, 412, 81, 942, 92, 621, 223, 540, 417, 750, 345, 746, 771, 764, 0,82,554,768, 584, 468, 853, 562, 273, 862, 337, 693, 649, 558, 555, 982, 204, 547, 75, 649, 258, 205, 766, 929, 562, 936, 1003,686,494,481,373,515 },
        { 204, 539, 459, 938, 439, 347, 544, 976, 768, 787, 648, 702, 894, 545, 551, 717, 985, 388, 374, 645, 713, 1032, 562, 568, 758, 565, 416, 416, 616, 674, 1113, 395, 501, 197, 802, 785, 959, 494, 128, 1013, 174, 692, 242, 559, 464, 769, 392, 741, 790, 811, 82,0,606,815, 655, 546, 900, 640, 320, 933, 389, 740, 696, 553, 574, 1029, 286, 622, 122, 696, 176, 287, 813, 924, 637, 983, 1050,757,569,450,291,590 },
        { 709, 727, 828, 590, 278, 564, 1056, 416, 1169, 1048, 836, 590, 756, 623, 993, 897, 1168, 479, 323, 1046, 733, 1114, 592, 325, 410, 805, 692, 692, 44, 207, 1022, 789, 950, 778, 884, 1150, 611, 441, 480, 1095, 534, 774, 742, 883, 558, 1134, 616, 828, 1191, 673, 554,606,0,255, 737, 151, 853, 306, 312, 1015, 217, 180, 456, 811, 939, 820, 422, 657, 629, 285, 782, 489, 787, 939, 624, 525, 702,839,555,752,721,668 },
        { 918, 859, 1083, 549, 533, 819, 1305, 161, 1424, 1303, 1091, 559, 715, 878, 1248, 1152, 1423, 734, 578, 1301, 703, 1369, 576, 309, 379, 1060, 901, 901, 211, 176, 922, 998, 1205, 987, 1139, 1405, 361, 696, 689, 1350, 789, 1029, 991, 1138, 672, 1389, 825, 798, 1446, 632, 768,815,255,0, 992, 406, 812, 561, 495, 1270, 472, 75, 440, 879, 1194, 720, 677, 912, 843, 254, 991, 744, 756, 898, 879, 270, 495,1094,810,961,930,923 },
        { 797, 1054, 306, 1259, 523, 305, 569, 1153, 605, 311, 99, 1162, 1354, 114, 447, 160, 431, 347, 466, 491, 1182, 377, 1029, 889, 1079, 177, 967, 967, 781, 944, 1644, 988, 446, 790, 147, 485, 1280, 359, 627, 358, 492, 37, 515, 206, 963, 450, 891, 1277, 636, 1271, 584,655,737,992, 0, 586, 1369, 531, 743, 278, 637, 917, 1020, 1104, 345, 1489, 523, 182, 533, 978, 628, 383, 1282, 1455, 271, 1262, 1371,102,248,1027,884,69 },
        { 721, 752, 677, 741, 131, 413, 905, 567, 1018, 897, 685, 719, 907, 472, 842, 746, 1017, 328, 172, 895, 776, 963, 623, 446, 561, 654, 704, 704, 195, 358, 1173, 801, 799, 743, 733, 999, 762, 290, 453, 944, 392, 623, 591, 732, 583, 983, 628, 871, 1040, 824, 468,546,151,406, 586, 0, 963, 155, 337, 864, 229, 331, 577, 836, 788, 971, 280, 506, 502, 436, 702, 338, 876, 1049, 473, 676, 853,688,404,764,733,517 },
        { 708, 390, 1280, 331, 846, 1065, 1248, 659, 1587, 1608, 1389, 284, 97, 1255, 1370, 1458, 1729, 1066, 910, 1466, 187, 1746, 340, 557, 446, 1306, 496, 496, 809, 646, 275, 689, 1322, 777, 1516, 1606, 530, 1100, 772, 1727, 907, 1406, 1063, 1380, 436, 1590, 553, 231, 1559, 180, 853,900,853,812, 1369, 963, 0, 1104, 626, 1647, 734, 747, 426, 359, 1395, 260, 850, 1316, 928, 568, 997, 990, 87, 86, 1283, 591, 434,1471,1214,556,621,1300 },
        { 844, 893, 676, 896, 258, 409, 946, 722, 1017, 842, 630, 864, 1056, 417, 841, 691, 962, 278, 266, 894, 917, 908, 764, 591, 716, 653, 845, 845, 350, 513, 1328, 942, 840, 837, 678, 998, 917, 183, 547, 889, 486, 568, 632, 731, 724, 981, 769, 1012, 1039, 973, 562,640,306,561, 531, 155, 1104, 0, 478, 809, 372, 486, 722, 977, 787, 1126, 374, 399, 589, 591, 743, 383, 1017, 1190, 366, 831, 1008,633,297,905,874,462 },
        { 423, 415, 703, 618, 220, 439, 810, 656, 1022, 983, 763, 428, 620, 629, 805, 832, 1103, 440, 284, 899, 439, 1120, 286, 248, 438, 680, 406, 406, 296, 354, 901, 503, 755, 492, 890, 1025, 639, 474, 194, 1101, 325, 780, 496, 758, 246, 1009, 330, 534, 1044, 537, 273,320,312,495, 743, 337, 626, 478, 0, 1021, 108, 420, 379, 499, 814, 755, 224, 690, 348, 376, 496, 364, 539, 712, 657, 663, 730,845,588,466,435,674 },
        { 1075, 1332, 584, 1537, 801, 583, 847, 1431, 631, 377, 377, 1440, 1632, 392, 725, 373, 187, 625, 744, 661, 1460, 140, 1307, 1167, 1357, 455, 1245, 1245, 1059, 1222, 1922, 1266, 724, 1068, 131, 507, 1558, 637, 905, 121, 770, 241, 793, 484, 1241, 510, 1169, 1555, 730, 1549, 862,933,1015,1270, 278, 864, 1647, 809, 1021, 0, 915, 1195, 1298, 1382, 600, 1767, 801, 460, 811, 1256, 906, 661, 1560, 1733, 549, 1540, 1649,306,526,1305,1162,347 },
        { 492, 523, 643, 675, 114, 379, 871, 633, 984, 923, 703, 536, 728, 523, 808, 772, 1043, 334, 178, 861, 547, 1014, 394, 305, 495, 620, 475, 475, 261, 372, 1009, 572, 765, 561, 784, 965, 696, 368, 263, 995, 317, 674, 557, 698, 354, 949, 399, 642, 1006, 645, 337,389,217,472, 637, 229, 734, 372, 108, 915, 0, 397, 436, 607, 754, 863, 205, 584, 412, 394, 565, 304, 647, 820, 551, 720, 787,739,482,535,504,568 },
        { 843, 784, 1008, 484, 458, 744, 1230, 236, 1349, 1228, 1016, 484, 650, 803, 1173, 1077, 1348, 659, 503, 1226, 628, 1294, 501, 234, 304, 985, 826, 826, 136, 101, 916, 923, 1130, 912, 1064, 1330, 436, 621, 614, 1275, 714, 954, 916, 1063, 597, 1314, 750, 723, 1371, 567, 693,740,180,75, 917, 331, 747, 486, 420, 1195, 397, 0, 365, 804, 1119, 714, 602, 837, 768, 179, 916, 669, 681, 833, 804, 345, 570,1019,735,886,855,848 },
        { 628, 419, 1079, 423, 497, 815, 1168, 461, 1398, 1331, 1119, 142, 334, 906, 1181, 1180, 1451, 745, 589, 1275, 277, 1397, 136, 131, 243, 1056, 476, 476, 427, 264, 641, 609, 1131, 697, 1167, 1401, 444, 751, 568, 1378, 703, 1057, 872, 1134, 232, 1385, 456, 372, 1420, 251, 649,696,456,440, 1020, 577, 426, 722, 379, 1298, 436, 365, 0, 443, 1190, 469, 603, 967, 724, 260, 872, 740, 339, 512, 934, 468, 535,1122,865,536,541,951 },
        { 349, 112, 921, 617, 719, 796, 889, 726, 1228, 1249, 1098, 320, 383, 990, 1011, 1167, 1438, 826, 758, 1107, 176, 1481, 319, 574, 500, 1015, 137, 137, 795, 703, 560, 330, 963, 418, 1251, 1247, 704, 932, 477, 1462, 612, 1141, 704, 1021, 271, 1231, 213, 188, 1200, 433, 558,553,811,879, 1104, 836, 359, 977, 499, 1382, 607, 804, 443, 0, 1036, 546, 674, 1067, 613, 625, 638, 725, 272, 371, 1082, 733, 720,1206,1014,197,262,1035 },
        { 687, 1022, 115, 1429, 708, 367, 294, 1355, 273, 223, 251, 1210, 1402, 459, 172, 308, 421, 509, 616, 150, 1212, 629, 1070, 1059, 1249, 217, 899, 899, 983, 1126, 1596, 878, 171, 680, 492, 211, 1450, 615, 636, 646, 537, 382, 338, 139, 972, 195, 879, 1224, 295, 1319, 555,574,939,1194, 345, 788, 1395, 787, 814, 600, 754, 1119, 1190, 1036, 0, 1537, 590, 527, 480, 1148, 451, 450, 1308, 1407, 616, 1464, 1541,376,558,933,774,414 },
        { 895, 577, 1422, 230, 966, 1194, 1435, 567, 1731, 1738, 1518, 331, 163, 1375, 1514, 1587, 1858, 1195, 1039, 1608, 370, 1866, 469, 600, 413, 1435, 683, 683, 776, 613, 202, 876, 1464, 964, 1636, 1748, 365, 1220, 901, 1847, 1036, 1526, 1205, 1513, 565, 1732, 740, 447, 1746, 218, 982,1029,820,720, 1489, 971, 260, 1126, 755, 1767, 863, 714, 469, 546, 1537, 0, 979, 1436, 1057, 535, 1184, 1119, 298, 346, 1403, 453, 225,1591,1334,743,808,1420 },
        { 486, 624, 479, 842, 200, 215, 684, 838, 820, 759, 539, 652, 844, 409, 644, 608, 879, 245, 108, 697, 663, 900, 510, 472, 662, 456, 537, 537, 466, 577, 1125, 634, 600, 479, 670, 801, 863, 301, 197, 881, 112, 560, 370, 534, 470, 785, 461, 758, 842, 761, 204,286,422,677, 523, 280, 850, 374, 224, 801, 205, 602, 603, 674, 590, 979, 0, 486, 222, 599, 433, 140, 763, 936, 484, 887, 954,625,415,597,566,454 },
        { 764, 1017, 488, 1206, 470, 268, 751, 1073, 787, 493, 281, 1109, 1301, 158, 629, 342, 613, 295, 413, 673, 1129, 559, 976, 836, 1026, 359, 930, 930, 701, 864, 1591, 955, 628, 757, 329, 667, 1227, 216, 590, 540, 455, 219, 533, 388, 926, 632, 854, 1224, 818, 1218, 547,622,657,912, 182, 506, 1316, 399, 690, 460, 584, 837, 967, 1067, 527, 1436, 486, 0, 500, 925, 644, 346, 1229, 1402, 89, 1182, 1318,284,102,990,851,113 },
        { 264, 583, 365, 966, 422, 225, 462, 1004, 674, 693, 526, 730, 922, 423, 457, 595, 866, 311, 330, 551, 741, 910, 590, 596, 786, 443, 476, 476, 644, 702, 1173, 455, 407, 257, 680, 691, 987, 417, 156, 891, 110, 570, 148, 465, 492, 675, 420, 801, 696, 839, 75,122,629,843, 533, 502, 928, 589, 348, 811, 412, 768, 724, 613, 480, 1057, 222, 500, 0, 724, 211, 210, 841, 984, 515, 1011, 1078,635,447,510,351,468 },
        { 799, 656, 1037, 305, 455, 773, 1186, 343, 1378, 1289, 1077, 305, 471, 864, 1181, 1138, 1409, 703, 547, 1255, 449, 1355, 396, 155, 125, 1014, 736, 736, 241, 78, 737, 869, 1131, 868, 1125, 1359, 326, 709, 570, 1336, 701, 1015, 872, 1092, 492, 1343, 706, 544, 1400, 388, 649,696,285,254, 978, 436, 568, 591, 376, 1256, 394, 179, 260, 625, 1148, 535, 599, 925, 724, 0, 872, 698, 502, 654, 892, 350, 417,1080,823,796,801,909 },
        { 289, 624, 336, 1114, 615, 369, 374, 1152, 641, 664, 534, 878, 1021, 567, 419, 603, 862, 465, 530, 518, 814, 1005, 738, 744, 934, 451, 501, 501, 792, 850, 1198, 480, 368, 235, 775, 662, 1135, 571, 304, 986, 321, 665, 119, 436, 640, 646, 481, 826, 660, 987, 258,176,782,991, 628, 702, 997, 743, 496, 906, 565, 916, 872, 638, 451, 1184, 433, 644, 211, 872, 0, 364, 910, 1009, 659, 1159, 1226,663,591,535,376,612 },
        { 474, 675, 339, 979, 258, 75, 567, 905, 680, 619, 399, 792, 984, 269, 504, 468, 739, 105, 166, 557, 803, 760, 650, 609, 799, 316, 588, 588, 533, 676, 1265, 665, 461, 467, 530, 661, 1000, 211, 248, 741, 113, 420, 253, 394, 584, 645, 512, 898, 702, 901, 205,287,489,744, 383, 338, 990, 383, 364, 661, 304, 669, 740, 725, 450, 1119, 140, 346, 210, 698, 364, 0, 903, 1076, 361, 1014, 1091,485,293,648,561,314 },
        { 621, 303, 1193, 369, 759, 978, 1161, 603, 1500, 1521, 1302, 197, 135, 1168, 1283, 1371, 1642, 979, 823, 1379, 100, 1659, 253, 470, 377, 1219, 409, 409, 743, 580, 362, 602, 1235, 690, 1429, 1519, 568, 1013, 685, 1640, 820, 1319, 976, 1293, 349, 1503, 466, 149, 1472, 218, 766,813,787,756, 1282, 876, 87, 1017, 539, 1560, 647, 681, 339, 272, 1308, 298, 763, 1229, 841, 502, 910, 903, 0, 173, 1196, 610, 472,1384,1127,469,534,1213 },
        { 720, 476, 1292, 417, 932, 1151, 1260, 745, 1599, 1620, 1469, 370, 183, 1341, 1382, 1538, 1809, 1152, 996, 1478, 273, 1832, 426, 643, 532, 1386, 508, 508, 895, 732, 189, 701, 1334, 789, 1602, 1618, 616, 1186, 848, 1813, 983, 1492, 1075, 1392, 522, 1602, 584, 209, 1571, 266, 929,924,939,898, 1455, 1049, 86, 1190, 712, 1733, 820, 833, 512, 371, 1407, 346, 936, 1402, 984, 654, 1009, 1076, 173, 0, 1369, 677, 520,1557,1300,568,633,1386 },
        { 779, 1032, 515, 1173, 437, 283, 802, 1040, 856, 582, 370, 1076, 1268, 174, 680, 431, 702, 282, 380, 733, 1096, 648, 943, 803, 993, 448, 945, 945, 668, 831, 1558, 970, 679, 772, 418, 756, 1194, 183, 605, 629, 470, 308, 548, 477, 903, 721, 869, 1191, 878, 1185, 562,637,624,879, 271, 473, 1283, 366, 657, 549, 551, 804, 934, 1082, 616, 1403, 484, 89, 515, 892, 659, 361, 1196, 1369, 0, 1149, 1285,373,89,1005,866,202 },
        { 1043, 764, 1353, 309, 781, 1089, 1473, 117, 1685, 1573, 1361, 413, 494, 1148, 1468, 1422, 1693, 1004, 848, 1562, 557, 1639, 551, 415, 233, 1330, 870, 870, 481, 428, 655, 1024, 1418, 1112, 1409, 1675, 94, 966, 857, 1620, 988, 1299, 1159, 1408, 647, 1659, 871, 652, 1707, 411, 936,983,525,270, 1262, 676, 591, 831, 663, 1540, 720, 345, 468, 733, 1464, 453, 887, 1182, 1011, 350, 1159, 1014, 610, 677, 1149, 0, 228,1364,1080,930,956,1193 },
        { 1069, 751, 1430, 143, 848, 1166, 1540, 342, 1752, 1682, 1470, 475, 337, 1257, 1535, 1531, 1802, 1096, 940, 1629, 544, 1748, 613, 482, 295, 1407, 857, 857, 658, 495, 427, 1050, 1485, 1138, 1518, 1752, 140, 1102, 924, 1729, 1055, 1408, 1226, 1485, 709, 1736, 914, 621, 1774, 388, 1003,1050,702,495, 1371, 853, 434, 1008, 730, 1649, 787, 570, 535, 720, 1541, 225, 954, 1318, 1078, 417, 1226, 1091, 472, 520, 1285, 228, 0,1473,1216,917,982,1302 },
        { 899, 1156, 341, 1361, 625, 407, 604, 1255, 510, 216, 129, 1264, 1456, 216, 482, 69, 336, 449, 568, 501, 1284, 405, 1131, 991, 1181, 212, 1069, 1069, 883, 1046, 1746, 1090, 481, 892, 175, 390, 1382, 461, 729, 386, 594, 65, 550, 241, 1065, 355, 993, 1379, 609, 1373, 686,757,839,1094, 102, 688, 1471, 633, 845, 306, 739, 1019, 1122, 1206, 376, 1591, 625, 284, 635, 1080, 663, 485, 1384, 1557, 373, 1364, 1473,0,350,1129,986,171 },
        { 711, 964, 447, 1104, 368, 215, 734, 971, 788, 559, 347, 1007, 1199, 134, 612, 408, 679, 193, 311, 665, 1027, 625, 874, 734, 924, 424, 877, 877, 599, 762, 1489, 902, 611, 704, 395, 733, 1125, 114, 537, 606, 402, 285, 480, 454, 834, 698, 801, 1122, 810, 1116, 494,569,555,810, 248, 404, 1214, 297, 588, 526, 482, 735, 865, 1014, 558, 1334, 415, 102, 447, 823, 591, 293, 1127, 1300, 89, 1080, 1216,350,0,937,798,179 },
        { 246, 210, 818, 814, 647, 719, 786, 923, 1125, 1146, 1016, 517, 580, 913, 908, 1085, 1344, 749, 681, 1004, 373, 1404, 402, 667, 697, 933, 64, 64, 762, 800, 757, 145, 860, 315, 1174, 1144, 901, 855, 400, 1385, 535, 1064, 601, 918, 304, 1128, 136, 385, 1097, 630, 481,450,752,961, 1027, 764, 556, 905, 466, 1305, 535, 886, 536, 197, 933, 743, 597, 990, 510, 796, 535, 648, 469, 568, 1005, 930, 917,1129,937,0,159,958 },
        { 87, 248, 659, 879, 616, 576, 627, 949, 966, 987, 857, 547, 645, 774, 749, 926, 1185, 662, 650, 845, 438, 1261, 407, 672, 723, 774, 125, 125, 731, 789, 822, 129, 701, 156, 1031, 985, 927, 768, 369, 1242, 461, 921, 442, 759, 309, 969, 105, 450, 938, 656, 373,291,721,930, 884, 733, 621, 874, 435, 1162, 504, 855, 541, 262, 774, 808, 566, 851, 351, 801, 376, 561, 534, 633, 866, 956, 982,986,798,159,0,819 },
        { 732, 985, 375, 1190, 454, 236, 638, 1084, 674, 380, 168, 1093, 1285, 45, 516, 229, 500, 278, 397, 560, 1113, 446, 960, 820, 1010, 246, 898, 898, 712, 875, 1575, 923, 515, 725, 216, 554, 1211, 290, 558, 427, 423, 106, 501, 275, 894, 519, 822, 1208, 705, 1202, 515,590,668,923, 69, 517, 1300, 462, 674, 347, 568, 848, 951, 1035, 414, 1420, 454, 113, 468, 909, 612, 314, 1213, 1386, 202, 1193, 1302,171,179,958,819,0 }
    };
   
    int delay = 1000;
    int tirSayac = 0;

    
    /**
     * Creates new form GuiFrame
     */
    public GuiFrame() {
        
        
        iller.put(1,"ADANA");
        iller.put(2,"ADIYAMAN");
        iller.put(3,"AFYONKARAHİSAR");
        iller.put(4,"AĞRI");
        iller.put(5,"AMASYA");
        iller.put(6,"ANKARA");
        iller.put(7,"ANTALYA");
        iller.put(8,"ARTVİN");
        iller.put(9,"AYDIN");
        iller.put(10,"BALIKESİR");
        iller.put(11,"BİLECİK");
        iller.put(12,"BİNGÖL");
        iller.put(13,"BİTLİS");
        iller.put(14,"BOLU");
        iller.put(15,"BURDUR");
        iller.put(16,"BURSA");
        iller.put(17,"ÇANAKKALE");
        iller.put(18,"ÇANKIRI");
        iller.put(19,"ÇORUM");
        iller.put(20,"DENİZLİ");
        iller.put(21,"DİYARBAKIR");
        iller.put(22,"EDİRNE");
        iller.put(23,"ELAZIĞ");
        iller.put(24,"ERZİNCAN");
        iller.put(25,"ERZURUM");
        iller.put(26,"ESKİŞEHİR");
        iller.put(27,"GAZİANTEP");
        iller.put(28,"GİRESUN");
        iller.put(29,"GÜMÜŞHANE");
        iller.put(30,"HAKKARİ");
        iller.put(31,"HATAY");
        iller.put(32,"ISPARTA");
        iller.put(33,"MERSİN");
        iller.put(34,"İSTANBUL");
        iller.put(35,"İZMİR");
        iller.put(36,"KARS");
        iller.put(37,"KASTAMONU");
        iller.put(38,"KAYSERİ");
        iller.put(39,"KIRKLARELİ");
        iller.put(40,"KIRŞEHİR");
        iller.put(41,"KOCAELİ (İZMİT)");
        iller.put(42,"KONYA");
        iller.put(43,"KÜTAHYA");
        iller.put(44,"MALATYA");
        iller.put(45,"MANİSA");
        iller.put(46,"KAHRAMANMARAŞ");
        iller.put(47,"MARDİN");
        iller.put(48,"MUĞLA");
        iller.put(49,"MUŞ");
        iller.put(50,"NEVŞEHİR");
        iller.put(51,"NİĞDE");
        iller.put(52,"ORDU");
        iller.put(53,"RİZE");
        iller.put(54,"SAKARYA (ADAPAZARI)");
        iller.put(55,"SAMSUN");
        iller.put(56,"SİİRT");
        iller.put(57,"SİNOP");
        iller.put(58,"SİVAS");
        iller.put(59,"TEKİRDAĞ");
        iller.put(60,"TOKAT");
        iller.put(61,"TRABZON");
        iller.put(62,"TUNCELİ");
        iller.put(63,"ŞANLIURFA");
        iller.put(64,"UŞAK");
        iller.put(65,"VAN");
        iller.put(66,"YOZGAT");
        iller.put(67,"ZONGULDAK");
        iller.put(68,"AKSARAY");
        iller.put(69,"BAYBURT");
        iller.put(70,"KARAMAN");
        iller.put(71,"KIRIKKALE");
        iller.put(72,"BATMAN");
        iller.put(73,"ŞIRNAK");
        iller.put(74,"BARTIN");
        iller.put(75,"ARDAHAN");
        iller.put(76,"IĞDIR");
        iller.put(77,"YALOVA");
        iller.put(78,"KARABÜK");
        iller.put(79,"KİLİS");
        iller.put(80,"OSMANİYE");
        iller.put(81,"DÜZCE");
        
        
        
        siparisleriHesapla();
        
																			

        

        
        
        
        initComponents();
        //yeniTabloOlustur();
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Hesapla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField3.setToolTipText("");

        jButton2.setText("Şehir ekle");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Şehir İsmi");

        jLabel2.setText("Taze");

        jLabel3.setText("Donmuş");

        jButton3.setText("Seçili Şehri Sil");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        jTextField4.setToolTipText("");

        jLabel4.setText("Mesafe");

        jButton4.setText("Kaza Yap");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Gecikme Ekle");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Araçları başlat");
        jButton6.setToolTipText("");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel5.setText("Gecikme Süresi");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jLabel6.setText("Gecikecek Araç No");

        jLabel7.setText("Kaza Yapacak Araç No");

        jLabel8.setText("Rota İsmi");

        jButton7.setText("Yukarı");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Aşağı");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Excel'e Yazdır");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Excel oku");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField8)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(180, 180, 180))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                                    .addComponent(jTextField6))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addGap(30, 30, 30)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton2)
                                        .addComponent(jButton3))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(15, 15, 15)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        rotaHesapYap();
        //adim1(tirlar);
        //adim2(tirlar);
        //adim3(tirlar);
        //adim4(tirlar);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        sehirEkle(jTextField1.getText(), parseInt(jTextField2.getText()), parseInt(jTextField3.getText()), parseInt(jTextField4.getText()), jTextField8.getText());
        //sehirOlustur(jTextField1.getText(), parseInt(jTextField4.getText()), parseInt(jTextField2.getText()), parseInt(jTextField3.getText()));
        rotaHesapYap();
        yeniTabloOlustur();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        seciliSehriSil();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            try {
                araclariBaslat();
            } catch (InterruptedException ex) {
                Logger.getLogger(GuiFrame.class.getName()).log(Level.SEVERE, null, ex);
            }   
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        seciliSehreGecikmeEkle(parseInt(jTextField5.getText()), parseInt(jTextField6.getText()));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        seciliAracKazaYapsin(parseInt(jTextField7.getText()));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        sehirEkleyeRotaYaz();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        rotadaDegisiklikYap(0);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        rotadaDegisiklikYap(1);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        try {
            tabloyuExceleYazdir();
        } catch (IOException ex) {
            Logger.getLogger(GuiFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        excelOku();
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiFrame().setVisible(true);
                System.out.println("Frame basladi");
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables

    
    int tirPalet = 66;
    int kamyonPalet = 36;
    int enIyiTir = 0;
    
    public void hesapYap(){
        
        int tirSayisi = 0;
        int kamyonSayisi = 0;
        
        int enIyiKamyon = 0;
        
        int toplam = 0;
        int i;
        
        int toplamTaze = 0;
        int toplamDonmus = 0;
        int toplamYuk = 0;
        int enOptimalTirSayisi = 0;
        int kullanilanTirSayisi = 0;
        
        String sonucString;
        
        enIyiTir = 0;
        
        for(i = 0; i < rotalar.size() ; i++){
            toplamTaze += rotalar.get(i).getToplamTaze();
            toplamDonmus += rotalar.get(i).getToplamDonmus();
            enIyiTir += rotalar.get(i).getGerekenTirSayisi();
        }
        
        toplamYuk = toplamTaze + toplamDonmus;
        sonucString = ("Rota sayisi: " + rotalar.size() + "\n");
        sonucString += ("Toplam taze: " + toplamTaze + "\n" + "Toplam donmuş: " + toplamDonmus + "\n");
        sonucString += ("Toplam yük: " + toplamYuk + "\n");
        
        sonucString += ("En optimal tır sayısı: " + enIyiTir);
        
        for(Rota rota : rotalar){
        }
        
        /*
        sonucString += ("\nGerçek tır sayısı: " + tirlar.size());
        int j = 0;
        int k = 0;
        jTextArea1.setText(sonucString);
        String araclarString = "";
        for(i=0 ; i<tirlar.size() ; i++){
          araclarString += "Tir " + i + " - Taze: ";
          araclarString += tirlar.get(i).getTaze() + " Donmus: " + tirlar.get(i).getDonmus(); 
          araclarString += "\nRota:";
          for(k=0 ; k<tirlar.get(i).getRota().size() ; k++){
              araclarString += (" - " + tirlar.get(i).getRota().get(k).getSehirIsmi());
          } 
          araclarString += "\n";
          araclarString += "Dagilim :";
          for(j=0 ; j<tirlar.get(i).getRota().size() ; j++){
            araclarString += tirlar.get(i).getTazeBolumleri().get(tirlar.get(i).getRota().get(j)) 
                + "-" + tirlar.get(i).getDonmusBolumleri().get(tirlar.get(i).getRota().get(j)) + " | ";
          }
          araclarString += "\n---------------------------------------------------------------\n";
        }
        */
        
        jTextArea2.setText(sonucString);
        
        //jTextArea2.setText(araclarString);
        
        
    }
    

    /*
    //Tazeleri araclara dagit
    public void adim1(ArrayList<Tir> tirlar){
        int i=0;
        int tirIndexi=0;
        int rotaRange = 1;
        
        ArrayList<Sehir> sehirler;
        ArrayList<Integer> tazeListesi = new ArrayList<Integer>();
        
        Set set = rotalar.entrySet();
        Iterator iterator = set.iterator();
        while(iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry)iterator.next();
            sehirler = (ArrayList<Sehir>) mentry.getValue();
            i=0;
            while(i<sehirler.size()) {
                if(sehirler.get(i).getTazeSiparis() > 0){
                    if(tirIndexi == tirlar.size()){
                        Tir tir = new Tir(tirSayac);
                        tirSayac++;
                        tirlar.add(tir); 
                    }
                    tiraTazeYukle(tirlar.get(tirIndexi), sehirler.get(i).getTazeSiparis(), sehirler.get(i));
                    if(sehirler.get(i).getTazeSiparis() == 0){
                        i++;
                        tirIndexi++;

                    }else{
                        tirIndexi++;
                        if(tirIndexi == tirlar.size()){
                            Tir tir = new Tir(tirSayac);
                            tirSayac++;
                            tirlar.add(tir);
                        }
                    }
                }else{
                    i++;
                }  
            }
        }
    }
    */
    
    
    
    //Tazeleri götüren tirlara yer kalmışssa aynı şehrin donmuşlarını da ekle
    public void adim2(ArrayList<Tir> tirlar){
        int i;
        int j;
        for(i=0 ; i<tirlar.size() ; i++){
            if(tirlar.get(i).getKalanDepo() > 0){
                for(j=0 ; j < tirlar.get(i).rota.size() ; j++){
                    tiraDonmusYukle(tirlar.get(i), tirlar.get(i).rota.get(j).getDonmusSiparis(), tirlar.get(i).rota.get(j));
                }   
            }
        }  
    }
    
    
    /*
    //Tekrar durum değerlendirmesi yap
    public void adim3(ArrayList<Tir> tirlar, ArrayList<Integer> tazeListesi, ArrayList<Integer> donmusListesi){
        int depodaKalanTaze = 0;
        int depodaKalanDonmus = 0;
        
        int i=0;
        int birSonrakiBosArac;
        
        int sehirRange = tazeListesi.size();
        
        for(i=0; i<sehirRange ; i++){
            depodaKalanTaze += tazeListesi.get(i);
            depodaKalanDonmus += donmusListesi.get(i);
        }
        
        System.out.println("Depoda kalan taze miktari: " + depodaKalanTaze);
        System.out.println("Depoda kalan donmus miktari: " + depodaKalanDonmus);
        System.out.print("Tirlardaki bos yer miktarlari: ");
        for(i=0 ; i<tirlar.size() ; i++){
            System.out.print(tirlar.get(i).getKalanDepo() + " / ");
        }
        System.out.print("\n");
        
        int j=0;
        int k=0;
        
        for(i=sehirRange-1 ; i>=0 ; i--){
            if((donmusListesi.get(i) != 0) || (tazeListesi.get(i) != 0)){
                System.out.print((i+1) + ". Şehirin istekleri tamamlanmamış. Yanındaki şehirler: ");
                if(i > 0){
                    System.out.print(i-1+1 + " ");
                }
                if(i < donmusListesi.size()-1){
                    System.out.print(i+1+1 + " ");
                }
                System.out.print("\n");
            }
            if(i < donmusListesi.size()-1){
                if(tirlar.get(i+1).getKalanDepo() > 0){
                    tiraDonmusYukle(tirlar.get(i+1), donmusListesi, i);
                    System.out.print((i) + ". Şehirin donmuslari " + (i+1) + ".tıra yüklendi");
                    tirlar.get(i+1).rotayaEkle(i);
                }
            }
            if(i > 0){
                if(tirlar.get(i-1).getKalanDepo() > 0){
                    tiraDonmusYukle(tirlar.get(i-1), donmusListesi, i);
                    System.out.print((i) + ". Şehirin donmuslari " + (i-1) + ".tıra yüklendi");
                    tirlar.get(i-1).rotayaEkle(i);
                }
            }
        }
        i=0;
        while( ((tirlar.get(i).getKalanDepo() == 0) || (tirlar.get(i).getRota().size() >= 2)) && i < tirlar.size()-1 ){
            i++;
        }
        birSonrakiBosArac = i;
        
        System.out.print("\n");
        
        
        i = sehirRange-1;
        while(i >= 0){
            if((donmusListesi.get(i) != 0) || (tazeListesi.get(i) != 0)){
                //tirlar.get(birSonrakiBosArac).tazeEkle(tazeListesi.get(i));
                tiraDonmusYukle(tirlar.get(birSonrakiBosArac), donmusListesi, i);
                System.out.println((i) + ". Şehirin donmuslari " + (birSonrakiBosArac) + ".tıra yüklendi");
                tirlar.get(birSonrakiBosArac).rotayaEkle(i);
                
                if((donmusListesi.get(i) == 0) || (tazeListesi.get(i) == 0)){
                    System.out.println((i) + ". Şehirin istekleri tamamlandı. ");
                }
            }
                
            
            if((donmusListesi.get(i) == 0) || (tazeListesi.get(i) == 0)){
                i--;
            }
            
            
            if(tirlar.get(birSonrakiBosArac).getKalanDepo() == 0){
                j=0;
                while(((tirlar.get(j).getKalanDepo() == 0)) && j < tirlar.size()){
                    j++;
                }
                birSonrakiBosArac = j;
                System.out.println((birSonrakiBosArac) + ". araç doldu. Bir sonraki araca geçiliyor.");
            }
            
        }
        
    }
    */
    
    /*
    //En optimal kamyon sayısından daha az sayıda tır varsa kalan tırlari oluştur ve yükleri dağıt
    public void adim3(ArrayList<Tir> tirlar){
        
        ArrayList<Sehir> sehirler;
        
        while(tirlar.size() < enIyiTir){
            Set set = rotalar.entrySet();
            Iterator iterator = set.iterator();
            while(iterator.hasNext()) {
                Map.Entry mentry = (Map.Entry)iterator.next();
                sehirler = (ArrayList<Sehir>) mentry.getValue();
                for(int i=0 ; i<sehirler.size() ; i++){
                    if(sehirler.get(i).getDonmusSiparis() > 0){
                        Tir tir = new Tir(tirSayac);
                        tirSayac++;
                        
                        tiraDonmusYukle(tir, sehirler.get(i).getDonmusSiparis(), sehirler.get(i));
                        tirlar.add(tir);
                        
                    }
                }
            }
        }
    }
    */
    
    
    /*
    public void adim4(ArrayList<Tir> tirlar){
        ArrayList<Sehir> sehirler;
        
        int rotadaKalanDonmusSayisi = 0;
        int eklenecekTirSayisi = 0;
        int i;
        int maxRota = 0;
        int sehirIndexi = 0;
        int tirIndexi = 0;
        
        Set set = rotalar.entrySet();
        Iterator iterator = set.iterator();
        while(iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry)iterator.next();
            sehirler = (ArrayList<Sehir>) mentry.getValue();
            
            rotadaKalanDonmusSayisi = rotadaKalanDonmusSayisiHesapla(sehirler);
            rotadaKalanDonmusSayisi -= araclardakiKalanDepoMiktariniHesapla();
            
            eklenecekTirSayisi = rotadaKalanDonmusSayisi / 66;
            
            
            if((rotadaKalanDonmusSayisi % 66) > 0){
                eklenecekTirSayisi++;
            }
            
            for(i=0 ; i<eklenecekTirSayisi ; i++){
                Tir tir = new Tir(tirSayac);
                tirSayac++;
                tirlar.add(tir);
            }
            
            //bir sonraki boş tıra geç
                    
                while(rotadaKalanDonmusSayisiHesapla(sehirler) > 0){  
                    while(tirIndexi < tirlar.size()){    
                        if( (tirlar.get(tirIndexi).getKalanDepo() > 0) && (tirlar.get(tirIndexi).getRota().size() <= maxRota) ){
                            tiraDonmusYukle(tirlar.get(tirIndexi), sehirler.get(sehirIndexi).getDonmusSiparis(), sehirler.get(sehirIndexi));
                        }
                        tirIndexi++;


                        while( (sehirIndexi < sehirler.size()) && (sehirler.get(sehirIndexi).getDonmusSiparis() == 0) ){
                            sehirIndexi++;
                        }
                        if(sehirIndexi == sehirler.size()){
                            tirIndexi = tirlar.size();
                        }
                    }
                    maxRota++;
                    tirIndexi = 0;
                }
                    

   
            
            
            
            maxRota=0;
            sehirIndexi=0;
            tirIndexi=0;
            
            
            
        }
        
    }
    */
    
    
    //bütün uzaklıkları dene
    /*
    public void adim4(ArrayList<Tir> tirlar){
        
        
        int i=0;
        int sonrakiTirIndexi;
        ArrayList<Sehir> sehirler;
        int rotaSayisi = 1;
       
        boolean devam;
       
        Set set = rotalar.entrySet();
        Iterator iterator = set.iterator();
        while(iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry)iterator.next();
            sehirler = (ArrayList<Sehir>) mentry.getValue();
            
            do{
                i=0;
                devam = false;
                sonrakiTirIndexi = -1;



                while((sonrakiTirIndexi == -1) && (i<tirlar.size())){
                    if( (tirlar.get(i).getRota().size() < rotaSayisi) && (tirlar.get(i).getKalanDepo() > 0) ){
                        sonrakiTirIndexi = i;
                    }
                    i++;
                }

                i=0;

                if(sonrakiTirIndexi > -1){
                   while( (i< sehirler.size()) && (tirlar.get(sonrakiTirIndexi).getKalanDepo() > 0)){
                        if(sehirler.get(i).getDonmusSiparis() > 0){
                            tiraDonmusYukle(tirlar.get(sonrakiTirIndexi), sehirler.get(i).getDonmusSiparis(), sehirler.get(i));
                            devam = true;
                        }
                        i++;
                   } 
                }else{

                    rotaSayisi++;
                    if(! bosTirVarMi(tirlar)){
                        Tir tir = new Tir(tirSayac);
                        tirSayac++;
                        tirlar.add(tir);
                        rotaSayisi = 1;
                    }
                    devam=true;
                }

            }while(devam);
            
        }

    }
    */
    
    
    public void tiraDonmusYukle(Tir tir, int donmusSiparisi, Sehir hedefSehir){
        
        //int alinabilecekDonmusMiktari = tir.getMaxDepo() - tir.getKalanDepo();
        
        //0-taze 1-donmus
        if((tir.getKalanDepo() > 0) && (donmusSiparisi > 0)){
            tir.maxDepoKontrolEt(1);
            if(donmusSiparisi <= tir.getKalanDepo()){
                tir.donmusEkle(donmusSiparisi, hedefSehir);
                hedefSehir.setDonmusSiparis(0);
                tir.setETA(hedefSehir.getMesafe());
            }else{
                int oncekiDonmus = donmusSiparisi;
                int eklenecekDonmus = tir.getKalanDepo();
                int sonrakiDonmus = oncekiDonmus - eklenecekDonmus;
                hedefSehir.setDonmusSiparis(sonrakiDonmus);
                tir.donmusEkle(eklenecekDonmus, hedefSehir);
                tir.setETA(hedefSehir.getMesafe());
            } 
        }
    }
    
    public void tiraTazeYukle(Tir tir, int tazeSiparisi, Sehir hedefSehir){
        
        //0-taze 1-donmus
        if(tir.getKalanDepo() > 2){
            tir.maxDepoKontrolEt(0);
            if(tazeSiparisi <= tir.getKalanDepo()){
                tir.tazeEkle(tazeSiparisi, hedefSehir);
                hedefSehir.setTazeSiparis(0);
                tir.setETA(hedefSehir.getMesafe());
            }else{
                int oncekiTaze = tazeSiparisi;
                int eklenecekTaze = tir.getKalanDepo();
                int sonrakiTaze = oncekiTaze - eklenecekTaze;
                hedefSehir.setTazeSiparis(sonrakiTaze);
                tir.tazeEkle(eklenecekTaze, hedefSehir);
                tir.setETA(hedefSehir.getMesafe());
            }  
        }
    }
    
    /*
    public void donmusDoldur(ArrayList<Tir> tirlar, ArrayList<Integer> donmusListesi){
        int i=0;
        int tirNumarasi = 0;
        Tir tir = tirlar.get(tirNumarasi);
        
        while(i < donmusListesi.size()){
            if (donmusListesi.get(i) > 0 ){
                tiraDonmusYukle(tirlar.get(tirNumarasi), donmusListesi, i);
            }
            i++;
        }
    }
    */
    
    public boolean bosTirVarMi(ArrayList<Tir> tirlar){
        for(Tir tir : tirlar){
            if(tir.getKalanDepo() > 0){
                return true;
            }
        }
        return false;
    }
    
    public void tazeleriCiftSayiYap(ArrayList<Integer> tazeListesi){
       int tmp;
       for(int i=0 ; i<tazeListesi.size() ; i++){
           if( (tazeListesi.get(i) % 2) == 1){
                tmp = tazeListesi.get(i);
                tmp++;
                tazeListesi.set(i, tmp);
           }
       }
    }
    
    
    public void sehirEkle(String sehirIsmi, int tazeSayisi, int donmusSayisi, int mesafe, String rotaIsmi){
        //ArrayList<Sehir> sehirler = new ArrayList<Sehir>();
        if(sehirAra(sehirIsmi) == null){
            Sehir sehir = listesizSehirOlustur(sehirIsmi, mesafe, tazeSayisi, donmusSayisi, rotaIsmi);
            rotayaEkle(sehir, sehir.getRotaIsmi());
        } 
    }
    
    public Sehir listesizSehirOlustur(String sehirIsmi, int mesafe, int tazeSiparis, int donmusSiparis, String rotaIsmi){
        Sehir sehir = new Sehir(sehirIsmi, mesafe, rotaIsmi, tazeSiparis, donmusSiparis);
        return sehir;
    }
    
    
    
    public void yeniTabloOlustur(){
        
        int i;
                
        String[] basliklar = new String[]{
           "Rota İsmi", "Şehir İsmi", "Mesafe (km)" ,"Taze", "Donmuş"
        };
        
        DefaultTableModel tableModel = new DefaultTableModel(basliklar, 0);
        /*
        Set set = rotalar.entrySet();
        Iterator iterator = set.iterator();
        while(iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry)iterator.next();
            Object[] dataRota = {mentry.getKey(), "", "", "", ""};
            tableModel.addRow(dataRota);
            ArrayList<Sehir> sehirler = (ArrayList<Sehir>) mentry.getValue();
            for(i=0 ; i<sehirler.size() ; i++){
              Object[] data = {"", sehirler.get(i).getSehirIsmi(), sehirler.get(i).getMesafe(), sehirler.get(i).getTazeSiparis(), sehirler.get(i).getDonmusSiparis()};
              tableModel.addRow(data); 
            }
            Object[] bosData = {"", "", "", "", ""};
            tableModel.addRow(bosData);
        }*/
        for (Rota rota : rotalar) {
            Object[] dataRota = {rota.getRotaIsmi(), "", "", rota.getToplamTaze(), rota.getToplamDonmus()};
            tableModel.addRow(dataRota);
            for (Sehir sehir : rota.getRota()) {
                Object[] data = {"", sehir.getSehirIsmi(), sehir.getMesafe(), sehir.getSabitTaze(), sehir.getSabitDonmus()};
                 tableModel.addRow(data); 
            }
            Object[] bosData = {"", "", "", "", ""};
            tableModel.addRow(bosData);
        }
        
        
        jTable1.setModel(tableModel);
        
        jTable1.revalidate();    
    }
    
    
    
    public void seciliSehriSil(){
        int row = jTable1.getSelectedRow();
        String sehirIsmi = (String) jTable1.getValueAt(row, 1);
        Sehir silinecekSehir = sehirAra(sehirIsmi);
        if(silinecekSehir != null){
            rotadanCikar(silinecekSehir);
        }
        rotaHesapYap();
        yeniTabloOlustur();  
    }
    
    
    public void araclariBaslat() throws InterruptedException{
        
        for(int i=0 ; i<tirlar.size() ; i++){
            tirlar.get(i).start();
        }
        new Timer(delay, taskPerformer).start();
    }
    
    public boolean tirlarUlastiMi(){
        for(int i=0 ; i< tirlar.size() ; i++){
            if(tirlar.get(i).getETA() > 0){
                return false;
            }
        }
        return true;
    }
    
    public void ETATablosuOlustur(){
        
        int i;
                
        String[] basliklar = new String[]{
           "Arac No", "ETA", "Taze", "Donmus", "Hedef"
        };
        
   
        DefaultTableModel tableModel = new DefaultTableModel(basliklar, 0);
        for(i=0 ; i<tirlar.size() ; i++){
           Object[] data = {tirlar.get(i).getID(), tirlar.get(i).getETA(), tirlar.get(i).getTaze(), tirlar.get(i).getDonmus(), tirlar.get(i).getRota().get(tirlar.get(i).getRota().size()-1).getSehirIsmi()};
           tableModel.addRow(data); 
        }
        
        jTable2.setModel(tableModel);
        jTable2.revalidate();   
        
    }
    
    
    ActionListener taskPerformer = new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            ETATablosuOlustur();
        }
    };
    
    public void seciliSehreGecikmeEkle(int gecikmeSuresi, int tirID){
        Tir gecikecekTir = TirIDAra(tirID);
        if(gecikecekTir != null){
            gecikecekTir.gecikmeEkle(gecikmeSuresi);
        }
    }
    
    public Tir TirIDAra(int ID){
        for(int i=0 ; i<tirlar.size() ; i++){
            if(tirlar.get(i).getID() == ID){
                return tirlar.get(i);
            }
        }
        return null;
    }
    
    public int TirIndexAra(Tir tir){
        for(int i=0 ; i< tirlar.size() ; i++){
            if(tir == tirlar.get(i)){
                return i;
            }
        }
        return -1;
    }
    
    
    public void seciliAracKazaYapsin(int tirID){
        Tir kazaYapacakTir = TirIDAra(tirID);
        Tir yeniTir = new Tir(tirSayac);
        tirSayac++;
        
        //int kazaYapacakTirIndexi = TirIndexAra(kazaYapacakTir);
        if(kazaYapacakTir != null){
            yeniTir.setDonmus(kazaYapacakTir.getDonmus());
            yeniTir.setTaze(kazaYapacakTir.getTaze());
            yeniTir.setDonmusBolumleri(kazaYapacakTir.getDonmusBolumleri());
            yeniTir.setTazeBolumleri(kazaYapacakTir.getTazeBolumleri());
            yeniTir.setRota(kazaYapacakTir.getRota());
            yeniTir.setETA(sonSehriBul(kazaYapacakTir));
        }
        tirlar.remove(kazaYapacakTir);
        tirlar.add(yeniTir);
        yeniTir.start();
        
    }
    
   
    
    
    
    public int sonSehriBul(Tir tir){
        int sonSehirIndexi = -1;
        int sonUzaklik = 0;
        for(int i=0 ; i<tir.getRota().size() ; i++){
            if(tir.getRota().get(i).getMesafe() > sonUzaklik){
                sonUzaklik = tir.getRota().get(i).getMesafe();
                sonSehirIndexi = i;
            }
        }
        
        return tir.getRota().get(sonSehirIndexi).getMesafe();
    }
    
    
    public void sehirOlustur(String sehirIsmi, int mesafe, int tazeSiparis, int donmusSiparis, ArrayList<Sehir> sehirler, String rotaIsmi){
        Sehir sehir = new Sehir(sehirIsmi, mesafe, rotaIsmi, tazeSiparis, donmusSiparis);
        sehirler.add(sehir);
    }
   
    
    public void rotaOlustur(ArrayList<Rota> rotalar, ArrayList<Sehir> sehirler, String rotaIsmi){
        Rota rota = new Rota(sehirler, rotaIsmi);
        rotalar.add(rota);
    }
    
    
    
    public void rotadanCikar(Sehir cikarilacakSehir){
        for(Rota rota : rotalar){
            if(rota.getRotaIsmi().equals(cikarilacakSehir.getRotaIsmi())){
                rota.getRota().remove(cikarilacakSehir);
            }
        }
    }
    
    
    
    public Sehir sehirAra(String sehirIsmi){
        
        for(Rota rota : rotalar){
            for(int i=0; i<rota.getRota().size() ; i++){
                if(rota.getRota().get(i).getSehirIsmi().equals(sehirIsmi)){
                    return rota.getRota().get(i);
                }
            }
        }
        return null;
    }
    
    
    
    public void rotayaEkle(Sehir sehir, String rotaIsmi){
        Rota rota = rotaAra(rotaIsmi);
        rota.getRota().add(sehir);
    }
    
    public Rota rotaAra(String rotaIsmi){
        for(Rota rota : rotalar){
            if(rota.getRotaIsmi().equals(rotaIsmi)){
                return rota;
            }
        }
        return null;
    }
    
    public int rotadaKalanDonmusSayisiHesapla(ArrayList<Sehir> sehirler){
        int rotadaKalanDonmusSayisi = 0;
        for(int i=0 ; i<sehirler.size() ; i++){
            rotadaKalanDonmusSayisi += sehirler.get(i).getDonmusSiparis();
        }
        
        return rotadaKalanDonmusSayisi;   
    }
    
    public int araclardakiKalanDepoMiktariniHesapla(){
        int toplamKalanDepo = 0;
        for(int i=0 ; i<tirlar.size() ; i++){
            toplamKalanDepo += tirlar.get(i).getKalanDepo();
        }
        return toplamKalanDepo;
    }
    
    public void rotaHesapYap(){
        hesaplariSifirla();
        yeniTabloOlustur();
        
        for(Rota rota : rotalar){
            rota.tirlaraYuklemeYap(tirlar);
        }
        hesapYap();
        rotalariYazdir();
        
    }
    
    public void rotalariYazdir(){
        String sonucString = jTextArea2.getText();
        sonucString += "\n";
        sonucString += "\n---------------------------------------------------------------\n";
        String araclarString = "";
        int i;
        int k;
        int j;
        for(i=0 ; i<tirlar.size() ; i++){
          araclarString += "Tir " + i + " - Taze: ";
          araclarString += tirlar.get(i).getTaze() + " Donmus: " + tirlar.get(i).getDonmus(); 
          araclarString += "\nRota:";
          for(k=0 ; k<tirlar.get(i).getRota().size() ; k++){
              araclarString += (" - " + tirlar.get(i).getRota().get(k).getSehirIsmi());
          } 
          araclarString += "\n";
          araclarString += "Dagilim :";
          for(j=0 ; j<tirlar.get(i).getRota().size() ; j++){
            araclarString += tirlar.get(i).getTazeBolumleri().get(tirlar.get(i).getRota().get(j)) 
                + "-" + tirlar.get(i).getDonmusBolumleri().get(tirlar.get(i).getRota().get(j)) + " | ";
          }
          araclarString += "\n---------------------------------------------------------------\n";
        }
        sonucString += araclarString;
        jTextArea2.setText(sonucString);
    }
    
    public void siparisleriYenile(){
        for(Rota rota : rotalar){
            for(int i=0 ; i<rota.getRota().size() ; i++){
                rota.getRota().get(i).siparisleriYenile();
            }
        }
    }
    
    public void hesaplariSifirla(){
        siparisleriYenile();
        //rotalar = new ArrayList<Rota>();
        for(Rota rota : rotalar){
            rota.toplamYukleriHesapla();
        }
        tirlar = new ArrayList<Tir>();
    }
    
    public void sehirEkleyeRotaYaz(){
        int row = jTable1.getSelectedRow();
        if( (jTable1.getValueAt(row, 0).equals("")) && (jTable1.getValueAt(row, 1) != "") ){
            Sehir sehir = sehirAra((String)jTable1.getValueAt(row, 1));
            jTextField8.setText(sehir.getRotaIsmi());
        }else{
            jTextField8.setText((String)jTable1.getValueAt(row, 0));
        }
    }
    
    public void rotadaDegisiklikYap(int mod){
        int row = jTable1.getSelectedRow(); 
        if( (row != 0) && (row != jTable1.getRowCount())  ){
            if(mod == 0){
                if( (jTable1.getValueAt(row,1) != "") && ((jTable1.getValueAt(row-1,1) != "")) ){
                    Sehir sehir1 = sehirAra((String)jTable1.getValueAt(row,1));
                    Sehir sehir2 = sehirAra((String)jTable1.getValueAt(row-1,1));

                    Rota rota = rotaAra(sehir1.getRotaIsmi());
                    rota.sehirSiraDegistir(sehir1, sehir2);
                    yeniTabloOlustur();
                    jTable1.setRowSelectionInterval(row-1, row-1);
                }
            }else{
                if( (jTable1.getValueAt(row,1) != "") && ((jTable1.getValueAt(row+1,1) != "")) ){
                    Sehir sehir1 = sehirAra((String)jTable1.getValueAt(row,1));
                    Sehir sehir2 = sehirAra((String)jTable1.getValueAt(row+1,1));

                    Rota rota = rotaAra(sehir1.getRotaIsmi());
                    rota.sehirSiraDegistir(sehir1, sehir2);
                    yeniTabloOlustur();
                    jTable1.setRowSelectionInterval(row+1, row+1);
                }
            }
        }
    }
    
    
    
    public void tabloyuExceleYazdir() throws FileNotFoundException, IOException{
        
        File f=new File("C:\\Users\\serdar\\Desktop\\test\\excel.xls");
        XSSFWorkbook workbook = new XSSFWorkbook(); 
        XSSFSheet spreadsheet = workbook.createSheet(" Employee Info ");
        XSSFRow row = null;
        Map < String, Object[] > empinfo = 
        new TreeMap < String, Object[] >();
        int i=0;
        empinfo.put( String.valueOf(i), new Object[] {"ROTA", "HEDEF", "MESAFE", "TAZE", "ŞOKLU"});
        i++;
        for (Rota rota : rotalar) {
            for (Sehir sehir : rota.getRota()) {
                empinfo.put( String.valueOf(i), new Object[] {sehir.getRotaIsmi(), sehir.getSehirIsmi(), String.valueOf(sehir.getMesafe()), String.valueOf(sehir.getSabitTaze()), String.valueOf(sehir.getSabitDonmus())});
                i++;
            }
        }

        Set < String > keyid = empinfo.keySet();
        int rowid = 0;

        for (String key : keyid) {
           row = spreadsheet.createRow(rowid++);
           Object [] objectArr = empinfo.get(key);
           int cellid = 0;

           for (Object obj : objectArr) {
            Cell cell = row.createCell(cellid++);
            cell.setCellValue((String)obj);
         }
        }

        //Write the workbook in file system
        FileOutputStream out = new FileOutputStream(new File("C:\\Users\\serdar\\Desktop\\test\\excel.xls"));
        workbook.write(out);
        out.close();
        System.out.println("Writesheet.xlsx written successfully");
        
        
        
    }
    
    
    public void excelOku(){
        String rotaIsmi = "";
        String eskiRotaIsmi = "";
        int siraNo = 0;
        String sehirIsmi = "";
        int uzaklik = 0;
        String plaka = "";
        double sokluPilic = 0;
        double tazePilic = 0;
        double sokluIlIs = 0;
        double tazeIlIs = 0;
        int donmus = 0;
        int taze = 0;
        ArrayList<Sehir> sehirler = new ArrayList<Sehir>();
        
        try {
            
            XSSFWorkbook wb = new XSSFWorkbook(new File("C:\\tirlar.xlsx"));
            XSSFSheet sheet = wb.getSheetAt(0);
            XSSFRow row;
            XSSFCell cell;

            int rows; // No of rows
            rows = sheet.getPhysicalNumberOfRows();

            int cols = 0; // No of columns
            int tmp = 0;

            // This trick ensures that we get the data properly even if it doesn't start from first few rows
            for(int i = 0; i < 10 || i < rows; i++) {
                row = sheet.getRow(i);
                if(row != null) {
                    tmp = sheet.getRow(i).getPhysicalNumberOfCells();
                    if(tmp > cols) cols = tmp;
                }
            }
            
            eskiRotaIsmi = sheet.getRow(3).getCell((short)0).toString();

            for(int r = 3; r < rows; r++) {
                row = sheet.getRow(r);
                try{
                    row.getCell((short)4).getNumericCellValue();
                    if(row != null) {



                        if( !(row.getCell((short)0).toString().equals("")) ){
                            cell = row.getCell((short)0);
                            rotaIsmi = cell.toString();    


                            if(!eskiRotaIsmi.equals(rotaIsmi)){
                                rotaOlustur(rotalar, sehirler, eskiRotaIsmi);
                                sehirler.clear();
                                eskiRotaIsmi = rotaIsmi;
                            }

                            /*
                            if(row.getCell((short)2) != null){
                                cell = row.getCell((short)0);
                                rotaIsmi = cell.toString();    
                            }
                            */

                            if(row.getCell((short)3) != null){
                                cell = row.getCell((short)3);
                                sehirIsmi = cell.toString();    
                            }

                            if(row.getCell((short)4) != null){
                                cell = row.getCell((short)4);
                                uzaklik = (int)cell.getNumericCellValue();
                            }

                            if(row.getCell((short)5) != null){
                                cell = row.getCell((short)5);
                                plaka = cell.toString();    
                            }

                            if(row.getCell((short)7) != null){
                                cell = row.getCell((short)7);
                                sokluPilic = cell.getNumericCellValue();   
                            }

                            if(row.getCell((short)8) != null){
                                cell = row.getCell((short)8);
                                tazePilic = cell.getNumericCellValue();   
                            }

                            if(row.getCell((short)9) != null){
                                cell = row.getCell((short)9);
                                sokluIlIs = cell.getNumericCellValue();    
                            }

                            if(row.getCell((short)10) != null){
                                cell = row.getCell((short)10);
                                tazeIlIs = cell.getNumericCellValue();   
                            }

                            taze = (int)(Math.ceil(tazePilic) + Math.ceil(tazeIlIs));
                            donmus = (int)(Math.ceil(sokluPilic) + Math.ceil(sokluIlIs));


                            sehirOlustur(sehirIsmi,uzaklik,donmus,taze,sehirler,rotaIsmi);
                        }
                    }
                }catch(Exception ioe) {
                        ioe.printStackTrace();
                } 
                
                    
                        
                       
                    /*
                    if(row.getCell((short)0) != null){
                        rotaIsmi = row.getCell((short)0);
                    }

                    cell = row.getCell((short)c);
                    if(cell != null) {
                        // Your code here
                    }
                    */
                }
            
        } catch(Exception ioe) {
            ioe.printStackTrace();
        }
        
        sehirler.clear();
        
    }
    
    public boolean isNumeric(String s) {  
        return s != null && s.matches("[-+]?\\d*\\.?\\d+");  
    }
    
    public void illeriOlustur(){
        
        
        
        try {
            
            XSSFWorkbook wb = new XSSFWorkbook(new File("C:\\ilmesafe2.xlsx"));
            XSSFSheet sheet = wb.getSheetAt(1);
            XSSFRow row;
            XSSFCell cell;

            int rows; // No of rows
            rows = sheet.getPhysicalNumberOfRows();

            int cols = 0; // No of columns
            int tmp = 0;

            // This trick ensures that we get the data properly even if it doesn't start from first few rows
            for(int i = 0; i < 10 || i < rows; i++) {
                row = sheet.getRow(i);
                if(row != null) {
                    tmp = sheet.getRow(i).getPhysicalNumberOfCells();
                    if(tmp > cols) cols = tmp;
                }
            }
            

            for(int r = 3; r < rows; r++) {
                row = sheet.getRow(r);
                try{
                    for(int c = 3; r<84 ;c++){
                        illerArasiUzakliklar[r-3][c-3] = (int) row.getCell((short)c).getNumericCellValue();
                    }
                }catch(Exception ioe) {
                        ioe.printStackTrace();
                } 
                
                    
                        
                       
                    /*
                    if(row.getCell((short)0) != null){
                        rotaIsmi = row.getCell((short)0);
                    }

                    cell = row.getCell((short)c);
                    if(cell != null) {
                        // Your code here
                    }
                    */
                }
            
        } catch(Exception ioe) {
            ioe.printStackTrace();
        }
    }
    
    public void siparisleriHesapla(){
        try {
            
            XSSFWorkbook wb = new XSSFWorkbook(new File("C:\\şehirler.xlsx"));
            XSSFSheet sheet = wb.getSheetAt(0);
            XSSFRow row;
            XSSFCell cell;

            int rows; // No of rows
            rows = sheet.getPhysicalNumberOfRows();

            int cols = 0; // No of columns
            int tmp = 0;

            // This trick ensures that we get the data properly even if it doesn't start from first few rows
            for(int i = 0; i < 10 || i < rows; i++) {
                row = sheet.getRow(i);
                if(row != null) {
                    tmp = sheet.getRow(i).getPhysicalNumberOfCells();
                    if(tmp > cols) cols = tmp;
                }
            }
            
            Sehir sehir;
            for(int r = 1; r < rows; r++) {
                row = sheet.getRow(r);
                sehir = butunSehirlerdeAra(row.getCell((short)0).toString());
                if(sehir == null) {
                    sehir = basitSehirOlustur(row.getCell((short)0).toString(), (int)Integer.parseInt(row.getCell((short)1).toString()), (int)Integer.parseInt(row.getCell((short)2).toString()));
                    butunSehirler.add(sehir);
                }else{
                    sehir.setTazeSiparis(sehir.getTazeSiparis() + (int)Integer.parseInt(row.getCell((short)1).toString()));
                    sehir.setSabitTaze(sehir.getTazeSiparis());
                    sehir.setDonmusSiparis(sehir.getDonmusSiparis() + (int)Integer.parseInt(row.getCell((short)2).toString()));
                    sehir.setSabitDonmus(sehir.getDonmusSiparis());
                }
            }
        } catch(Exception ioe) {
            ioe.printStackTrace();
        }
        
        
    }
    
    public Sehir basitSehirOlustur(String sehirIsmi, int tazeSiparis, int donmusSiparis){
        Sehir sehir = new Sehir(sehirIsmi, tazeSiparis, donmusSiparis);
        return sehir;
    }
    
    public Sehir butunSehirlerdeAra(String sehirIsmi){
        for(Sehir sehir : butunSehirler){
            if(sehir.getSehirIsmi().equals(sehirIsmi)){
                return sehir;
            }
        }
        return null;
    }
    
    
    
    
}
